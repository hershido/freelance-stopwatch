{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx\";\nimport React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }); // set the intervalid to null\n\n  const [intervalId, setIntervalId] = useState(null); // set input fields to empty\n\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\"\n  }); // Sets the states based on user inputs\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function watchToggle() {\n    if (!intervalId) {\n      // start timer\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1000); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null); // send request to server\n\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(\"body\", body);\n    }).then(setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    })).then(setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, (\"0\" + timer.hours.toString()).slice(-2), \":\", (\"0\" + timer.minutes.toString()).slice(-2), \":\", (\"0\" + timer.seconds.toString()).slice(-2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client,\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, intervalId ? \"pause\" : \"start\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    value: taskInput.task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: taskInput.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \" \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Recording\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Mixing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Video Editing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Programming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Whatever\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    placeholder: \"Enter Client\",\n    value: taskInput.client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx"],"names":["React","useState","Stopwatch","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","taskInput","setTaskInput","task","category","client","handleInput","event","value","target","fieldName","name","prevState","watchToggle","id","setInterval","clearInterval","watchDone","fetch","method","headers","body","JSON","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","console","log","json","toString","slice"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  // set the intervalid to null\n  const [intervalId, setIntervalId] = useState(null);\n  // set input fields to empty\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\",\n  });\n\n  // Sets the states based on user inputs\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput((prevState) => {\n      return {\n        ...prevState,\n        [fieldName]: value,\n      };\n    });\n  }\n\n  function watchToggle() {\n    if (!intervalId) {\n      // start timer\n      const id = setInterval(() => {\n        setTimer((prevState) => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n          return { seconds, minutes, hours };\n        });\n      }, 1000);\n\n      //  save interval id\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      //   remove internal id from stae\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n\n    // send request to server\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\", // body type\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration:\n          timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n      }),\n    })\n      .then(function (response) {\n        // run after get response from server\n        console.log(\"res\", response);\n        return response.json(); // wait to body data from server (PROMISE)\n      })\n      .then(function (body) {\n        //   run after all body back from server\n        console.log(\"body\", body);\n      })\n      .then(\n        setTaskInput({\n          task: \"\",\n          category: \"\",\n          client: \"\",\n        })\n      )\n      .then(\n        setTimer({\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n        })\n      );\n  }\n\n  return (\n    <div>\n      <div className='digits-container'>\n        <div className='digits'>\n          {(\"0\" + timer.hours.toString()).slice(-2)}:\n          {(\"0\" + timer.minutes.toString()).slice(-2)}:\n          {(\"0\" + timer.seconds.toString()).slice(-2)}\n        </div>\n      </div>\n      <div className='button-container'>\n        <button\n          disabled={!taskInput.task || !taskInput.category || !taskInput.client}\n          onClick={watchToggle}\n        >\n          {intervalId ? \"pause\" : \"start\"}\n        </button>\n        <button onClick={watchDone}>Done</button>\n        <button>Reset</button>\n      </div>\n\n      <div className='inputs-container'>\n        <input\n          onChange={handleInput}\n          name='task'\n          placeholder='Enter task'\n          value={taskInput.task}\n        ></input>\n        <input\n          onChange={handleInput}\n          type='text'\n          name='category'\n          list='categoryList'\n          placeholder='Category'\n          value={taskInput.category}\n        />\n        <datalist id='categoryList'>\n          <option value=' ' />\n          <option value='Recording' />\n          <option value='Mixing' />\n          <option value='Video Editing' />\n          <option value='Programming' />\n          <option value='Whatever' />\n        </datalist>\n        <input\n          onChange={handleInput}\n          name='client'\n          placeholder='Enter Client'\n          value={taskInput.client}\n        ></input>\n      </div>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}