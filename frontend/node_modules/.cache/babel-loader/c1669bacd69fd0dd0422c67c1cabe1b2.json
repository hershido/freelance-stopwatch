{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport TaskTable from './TaskTable';\nimport Input from './Input';\nimport Clock from './Clock';\nimport BtnsContainer from './BtnsContainer';\nconst States = {\n  PENDING: 'PENDING',\n  STARTED: 'STARTED',\n  PAUSED: 'PAUSED'\n};\nconst btnText = {\n  PENDING: 'Start',\n  STARTED: 'Pause',\n  PAUSED: 'Resume'\n};\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const user = JSON.parse(localStorage.getItem('loggedinUser'));\n  const [userData, setUserData] = useState(null);\n  const [clockState, setClockState] = useState(States.PENDING); // console.log(\"user\", user);\n\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }); // set the intervalid to null\n\n  const [intervalId, setIntervalId] = useState(null);\n  const [startButton, setStartButton] = useState('Start'); // set input fields to empty\n\n  const [taskInput, setTaskInput] = useState({\n    task: '',\n    category: '',\n    client: ''\n  });\n  const [filter, setFilter] = useState({\n    category: '',\n    client: ''\n  });\n  const [tasksArray, setTasksArray] = useState([]);\n  const [totalDuration, setTotalDuration] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  const [message, setMessage] = useState({\n    showMessage: false,\n    messageSuccess: false\n  }); // Sets the states based on user inputs\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function handleInput2(name, value) {\n    console.log('handleInput2', name, value);\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [name]: value\n      };\n    });\n  }\n\n  function handleFilter(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setFilter(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function watchToggle() {\n    messageClear();\n\n    if (!intervalId) {\n      // start timer\n      setClockState(States.STARTED);\n      setStartButton('Pause');\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      setStartButton('Resume');\n      setClockState(States.PAUSED); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton('Start');\n    setClockState(States.PENDING); // send request to server\n\n    fetch('http://localhost:5000/tasks/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: user,\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        // duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n        duration: {\n          seconds: timer.seconds,\n          minutes: timer.minutes,\n          hours: timer.hours\n        }\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log('res', response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(body);\n      setMessage({\n        showMessage: true,\n        messageSuccess: body.success\n      });\n    }).then(setTaskInput({\n      task: '',\n      category: '',\n      client: ''\n    })).then(setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    })).then(getUserTasks).then(getUser);\n    fetch('http://localhost:5000/users/updateuser', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json' // body type\n\n      },\n      body: JSON.stringify({\n        category: taskInput.category,\n        client: taskInput.client,\n        userEmail: user\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log('res', response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(body);\n    });\n  }\n\n  function watchReset() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton('Start');\n    setClockState(States.PENDING);\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setTaskInput({\n      task: '',\n      category: '',\n      client: ''\n    });\n  }\n\n  function messageClear() {\n    setMessage({\n      showMessage: false,\n      messageSuccess: false\n    });\n  }\n\n  function getUserTasks() {\n    fetch('http://localhost:5000/tasks/' + user, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // body type\n\n      },\n      body: JSON.stringify({\n        clientFilter: filter.client,\n        categoryFilter: filter.category\n      })\n    }).then(response => response.json()).then(data => {\n      let h = 0;\n      let m = 0;\n      let s = 0;\n      data.forEach(task => {\n        h = h + task.duration.hours;\n        m = m + task.duration.minutes;\n        s = s + task.duration.seconds;\n      });\n\n      function sumTotDur(hrs, mins, secs) {\n        m = Math.floor(m + s / 60);\n        s = s % 60;\n        h = Math.floor(h + m / 60);\n        m = m % 60;\n        return {\n          hours: h,\n          minutes: m,\n          seconds: s\n        };\n      }\n\n      const td = sumTotDur(h, m, s);\n      console.log('td', td);\n      setTotalDuration(td);\n      console.log(totalDuration);\n      setTasksArray(data);\n    });\n  } // run code after every render\n\n\n  function getUser() {\n    fetch('http://localhost:5000/users/getfname/' + user).then(response => response.json()).then(data => {\n      setUserData(data);\n    });\n  }\n\n  useEffect(() => {\n    getUserTasks();\n    getUser();\n  }, [filter]);\n\n  if (!user) {\n    // if no user in local storage redirect to login\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 10\n      }\n    });\n  }\n\n  const onDoneDisabled = !taskInput.task || !taskInput.category || !taskInput.client || timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0;\n  console.log(clockState);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"watch-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"welcome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 5\n    }\n  }, \"Hi \", userData && userData.fname, \", get That work done!\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 5\n    }\n  }, \"Enter a new task and hit that \\\"Start\\\" button, you can always pause and resume, and when your finished with your task hit \\\"Done\\\".\")), /*#__PURE__*/React.createElement(Clock, {\n    timer: timer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(BtnsContainer, {\n    onStart: watchToggle,\n    onDone: watchDone,\n    onDiscard: watchReset,\n    startText: btnText[clockState],\n    onStartDisabled: onDoneDisabled,\n    onDoneDisabled: onDoneDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"control-btn start-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client,\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 5\n    }\n  }, btnText[clockState]), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"control-btn done-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client || timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0,\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 5\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchReset,\n    className: \"control-btn reset-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 5\n    }\n  }, \"Discard\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInput2,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    value: taskInput.task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInput2,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: taskInput.category,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 5\n    }\n  }, userData && userData.userCategories.map(category => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 15\n      }\n    }, category);\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    list: \"clientList\",\n    placeholder: \"Enter Client\",\n    value: taskInput.client,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"clientList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 5\n    }\n  }, userData && userData.userClients.map(client => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 15\n      }\n    }, client);\n  }))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 4\n    }\n  }, \"Search By\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filterContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleFilter,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: filter.category,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 5\n    }\n  }, userData && userData.userCategories.map(category => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 15\n      }\n    }, category);\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleFilter,\n    name: \"client\",\n    list: \"clientList\",\n    placeholder: \"Client\",\n    value: filter.client,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"clientList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 5\n    }\n  }, userData && userData.userClients.map(client => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 15\n      }\n    }, client);\n  }))), /*#__PURE__*/React.createElement(TaskTable, {\n    tasks: tasksArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 4\n    }\n  }, \"Total task duration \", ('0' + totalDuration.hours.toString()).slice(-2), \":\", ('0' + totalDuration.minutes.toString()).slice(-2), \":\", ('0' + totalDuration.seconds.toString()).slice(-2)));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx"],"names":["React","useState","useEffect","Redirect","TaskTable","Input","Clock","BtnsContainer","States","PENDING","STARTED","PAUSED","btnText","Stopwatch","user","JSON","parse","localStorage","getItem","userData","setUserData","clockState","setClockState","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","startButton","setStartButton","taskInput","setTaskInput","task","category","client","filter","setFilter","tasksArray","setTasksArray","totalDuration","setTotalDuration","message","setMessage","showMessage","messageSuccess","handleInput","event","value","target","fieldName","name","prevState","handleInput2","console","log","handleFilter","watchToggle","messageClear","id","setInterval","clearInterval","watchDone","fetch","method","headers","body","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","json","success","getUserTasks","getUser","watchReset","clientFilter","categoryFilter","data","h","m","s","forEach","sumTotDur","hrs","mins","secs","Math","floor","td","onDoneDisabled","fname","userCategories","map","userClients","toString","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { Redirect } from 'react-router-dom';\nimport TaskTable from './TaskTable';\n\nimport Input from './Input';\nimport Clock from './Clock';\nimport BtnsContainer from './BtnsContainer';\n\nconst States = {\n\tPENDING: 'PENDING',\n\tSTARTED: 'STARTED',\n\tPAUSED: 'PAUSED',\n};\n\nconst btnText = {\n\tPENDING: 'Start',\n\tSTARTED: 'Pause',\n\tPAUSED: 'Resume',\n};\n\nfunction Stopwatch() {\n\t// set initial state for stopwatch\n\tconst user = JSON.parse(localStorage.getItem('loggedinUser'));\n\tconst [userData, setUserData] = useState(null);\n\tconst [clockState, setClockState] = useState(States.PENDING);\n\t// console.log(\"user\", user);\n\n\tconst [timer, setTimer] = useState({\n\t\thours: 0,\n\t\tminutes: 0,\n\t\tseconds: 0,\n\t});\n\t// set the intervalid to null\n\tconst [intervalId, setIntervalId] = useState(null);\n\n\tconst [startButton, setStartButton] = useState('Start');\n\t// set input fields to empty\n\tconst [taskInput, setTaskInput] = useState({\n\t\ttask: '',\n\t\tcategory: '',\n\t\tclient: '',\n\t});\n\n\tconst [filter, setFilter] = useState({\n\t\tcategory: '',\n\t\tclient: '',\n\t});\n\n\tconst [tasksArray, setTasksArray] = useState([]);\n\tconst [totalDuration, setTotalDuration] = useState({\n\t\thours: 0,\n\t\tminutes: 0,\n\t\tseconds: 0,\n\t});\n\n\tconst [message, setMessage] = useState({\n\t\tshowMessage: false,\n\t\tmessageSuccess: false,\n\t});\n\n\t// Sets the states based on user inputs\n\tfunction handleInput(event) {\n\t\tconst value = event.target.value;\n\t\tconst fieldName = event.target.name;\n\t\tsetTaskInput(prevState => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[fieldName]: value,\n\t\t\t};\n\t\t});\n\t}\n\tfunction handleInput2(name, value) {\n\t\tconsole.log('handleInput2', name, value);\n\t\tsetTaskInput(prevState => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t}\n\n\tfunction handleFilter(event) {\n\t\tconst value = event.target.value;\n\t\tconst fieldName = event.target.name;\n\t\tsetFilter(prevState => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[fieldName]: value,\n\t\t\t};\n\t\t});\n\t}\n\n\tfunction watchToggle() {\n\t\tmessageClear();\n\t\tif (!intervalId) {\n\t\t\t// start timer\n\t\t\tsetClockState(States.STARTED);\n\t\t\tsetStartButton('Pause');\n\t\t\tconst id = setInterval(() => {\n\t\t\t\tsetTimer(prevState => {\n\t\t\t\t\tlet minutes = prevState.minutes;\n\t\t\t\t\tlet seconds = prevState.seconds;\n\t\t\t\t\tlet hours = prevState.hours;\n\n\t\t\t\t\tif (seconds === 59) {\n\t\t\t\t\t\tseconds = 0;\n\t\t\t\t\t\tminutes++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseconds++;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (minutes === 59) {\n\t\t\t\t\t\tminutes = 0;\n\t\t\t\t\t\thours++;\n\t\t\t\t\t}\n\t\t\t\t\treturn { seconds, minutes, hours };\n\t\t\t\t});\n\t\t\t}, 1);\n\n\t\t\t//  save interval id\n\t\t\tsetIntervalId(id);\n\t\t} else {\n\t\t\t// pause timer\n\t\t\tclearInterval(intervalId);\n\t\t\tsetStartButton('Resume');\n\t\t\tsetClockState(States.PAUSED);\n\t\t\t//   remove internal id from stae\n\t\t\tsetIntervalId(null);\n\t\t}\n\t}\n\n\tfunction watchDone() {\n\t\tclearInterval(intervalId);\n\t\tsetIntervalId(null);\n\t\tsetStartButton('Start');\n\t\tsetClockState(States.PENDING);\n\t\t// send request to server\n\t\tfetch('http://localhost:5000/tasks/', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json', // body type\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tuserEmail: user,\n\t\t\t\ttaskTitle: taskInput.task,\n\t\t\t\ttaskCategory: taskInput.category,\n\t\t\t\tclientName: taskInput.client,\n\t\t\t\t// duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n\t\t\t\tduration: {\n\t\t\t\t\tseconds: timer.seconds,\n\t\t\t\t\tminutes: timer.minutes,\n\t\t\t\t\thours: timer.hours,\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\t\t\t.then(function (response) {\n\t\t\t\t// run after get response from server\n\t\t\t\tconsole.log('res', response);\n\t\t\t\treturn response.json(); // wait to body data from server (PROMISE)\n\t\t\t})\n\t\t\t.then(function (body) {\n\t\t\t\t//   run after all body back from server\n\t\t\t\tconsole.log(body);\n\n\t\t\t\tsetMessage({\n\t\t\t\t\tshowMessage: true,\n\t\t\t\t\tmessageSuccess: body.success,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(\n\t\t\t\tsetTaskInput({\n\t\t\t\t\ttask: '',\n\t\t\t\t\tcategory: '',\n\t\t\t\t\tclient: '',\n\t\t\t\t})\n\t\t\t)\n\t\t\t.then(\n\t\t\t\tsetTimer({\n\t\t\t\t\thours: 0,\n\t\t\t\t\tminutes: 0,\n\t\t\t\t\tseconds: 0,\n\t\t\t\t})\n\t\t\t)\n\t\t\t.then(getUserTasks)\n\t\t\t.then(getUser);\n\n\t\tfetch('http://localhost:5000/users/updateuser', {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json', // body type\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tcategory: taskInput.category,\n\t\t\t\tclient: taskInput.client,\n\t\t\t\tuserEmail: user,\n\t\t\t}),\n\t\t})\n\t\t\t.then(function (response) {\n\t\t\t\t// run after get response from server\n\t\t\t\tconsole.log('res', response);\n\t\t\t\treturn response.json(); // wait to body data from server (PROMISE)\n\t\t\t})\n\t\t\t.then(function (body) {\n\t\t\t\t//   run after all body back from server\n\t\t\t\tconsole.log(body);\n\t\t\t});\n\t}\n\n\tfunction watchReset() {\n\t\tclearInterval(intervalId);\n\t\tsetIntervalId(null);\n\t\tsetStartButton('Start');\n\t\tsetClockState(States.PENDING);\n\t\tsetTimer({\n\t\t\thours: 0,\n\t\t\tminutes: 0,\n\t\t\tseconds: 0,\n\t\t});\n\t\tsetTaskInput({\n\t\t\ttask: '',\n\t\t\tcategory: '',\n\t\t\tclient: '',\n\t\t});\n\t}\n\n\tfunction messageClear() {\n\t\tsetMessage({\n\t\t\tshowMessage: false,\n\t\t\tmessageSuccess: false,\n\t\t});\n\t}\n\tfunction getUserTasks() {\n\t\tfetch('http://localhost:5000/tasks/' + user, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json', // body type\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tclientFilter: filter.client,\n\t\t\t\tcategoryFilter: filter.category,\n\t\t\t}),\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tlet h = 0;\n\t\t\t\tlet m = 0;\n\t\t\t\tlet s = 0;\n\n\t\t\t\tdata.forEach(task => {\n\t\t\t\t\th = h + task.duration.hours;\n\t\t\t\t\tm = m + task.duration.minutes;\n\t\t\t\t\ts = s + task.duration.seconds;\n\t\t\t\t});\n\n\t\t\t\tfunction sumTotDur(hrs, mins, secs) {\n\t\t\t\t\tm = Math.floor(m + s / 60);\n\t\t\t\t\ts = s % 60;\n\t\t\t\t\th = Math.floor(h + m / 60);\n\t\t\t\t\tm = m % 60;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\thours: h,\n\t\t\t\t\t\tminutes: m,\n\t\t\t\t\t\tseconds: s,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst td = sumTotDur(h, m, s);\n\n\t\t\t\tconsole.log('td', td);\n\n\t\t\t\tsetTotalDuration(td);\n\n\t\t\t\tconsole.log(totalDuration);\n\n\t\t\t\tsetTasksArray(data);\n\t\t\t});\n\t}\n\n\t// run code after every render\n\n\tfunction getUser() {\n\t\tfetch('http://localhost:5000/users/getfname/' + user)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tsetUserData(data);\n\t\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\tgetUserTasks();\n\n\t\tgetUser();\n\t}, [filter]);\n\n\tif (!user) {\n\t\t// if no user in local storage redirect to login\n\t\treturn <Redirect to='/login' />;\n\t}\n\n\tconst onDoneDisabled =\n\t\t!taskInput.task ||\n\t\t!taskInput.category ||\n\t\t!taskInput.client ||\n\t\t(timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0);\n\n\tconsole.log(clockState);\n\treturn (\n\t\t<div>\n\t\t\t<header className='watch-header'>\n\t\t\t\t<h1 className='welcome'>Hi {userData && userData.fname}, get That work done!</h1>\n\t\t\t\t<p className='instructions'>\n\t\t\t\t\tEnter a new task and hit that \"Start\" button, you can always pause and resume, and when your finished with your\n\t\t\t\t\ttask hit \"Done\".\n\t\t\t\t</p>\n\t\t\t</header>\n\n\t\t\t<Clock timer={timer} />\n\n\t\t\t{/* <div className='digits-container'>\n            <div className='digits'>\n               {(\"0\" + timer.hours.toString()).slice(-2)}:{(\"0\" + timer.minutes.toString()).slice(-2)}:\n               {(\"0\" + timer.seconds.toString()).slice(-2)}\n            </div>\n         </div> */}\n\n\t\t\t<BtnsContainer\n\t\t\t\tonStart={watchToggle}\n\t\t\t\tonDone={watchDone}\n\t\t\t\tonDiscard={watchReset}\n\t\t\t\tstartText={btnText[clockState]}\n\t\t\t\tonStartDisabled={onDoneDisabled}\n\t\t\t\tonDoneDisabled={onDoneDisabled}\n\t\t\t/>\n\n\t\t\t<div className='button-container'>\n\t\t\t\t<button\n\t\t\t\t\tclassName='control-btn start-button'\n\t\t\t\t\tdisabled={!taskInput.task || !taskInput.category || !taskInput.client}\n\t\t\t\t\tonClick={watchToggle}>\n\t\t\t\t\t{btnText[clockState]}\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName='control-btn done-button'\n\t\t\t\t\tdisabled={\n\t\t\t\t\t\t!taskInput.task ||\n\t\t\t\t\t\t!taskInput.category ||\n\t\t\t\t\t\t!taskInput.client ||\n\t\t\t\t\t\t(timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0)\n\t\t\t\t\t}\n\t\t\t\t\tonClick={watchDone}>\n\t\t\t\t\tDone\n\t\t\t\t</button>\n\t\t\t\t<button onClick={watchReset} className='control-btn reset-button'>\n\t\t\t\t\tDiscard\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div className='inputs-container'>\n\t\t\t\t<Input onChange={handleInput2} name='task' placeholder='Enter task' value={taskInput.task} />\n\t\t\t\t<Input\n\t\t\t\t\tonChange={handleInput2}\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='category'\n\t\t\t\t\tlist='categoryList'\n\t\t\t\t\tplaceholder='Category'\n\t\t\t\t\tvalue={taskInput.category}\n\t\t\t\t\tautoComplete='off'\n\t\t\t\t/>\n\n\t\t\t\t<datalist id='categoryList'>\n\t\t\t\t\t{userData &&\n\t\t\t\t\t\tuserData.userCategories.map(category => {\n\t\t\t\t\t\t\treturn <option>{category}</option>;\n\t\t\t\t\t\t})}\n\t\t\t\t</datalist>\n\n\t\t\t\t<input\n\t\t\t\t\tonChange={handleInput}\n\t\t\t\t\tname='client'\n\t\t\t\t\tlist='clientList'\n\t\t\t\t\tplaceholder='Enter Client'\n\t\t\t\t\tvalue={taskInput.client}\n\t\t\t\t\tautoComplete='off'\n\t\t\t\t/>\n\n\t\t\t\t<datalist id='clientList'>\n\t\t\t\t\t{userData &&\n\t\t\t\t\t\tuserData.userClients.map(client => {\n\t\t\t\t\t\t\treturn <option>{client}</option>;\n\t\t\t\t\t\t})}\n\t\t\t\t</datalist>\n\t\t\t</div>\n\n\t\t\t<h2>Search By</h2>\n\n\t\t\t<div className='filterContainer'>\n\t\t\t\t{/* <input onChange={handleInput} name='task' placeholder='Enter task' value={taskInput.task} autoComplete='off'></input> */}\n\t\t\t\t<input\n\t\t\t\t\tonChange={handleFilter}\n\t\t\t\t\ttype='text'\n\t\t\t\t\tname='category'\n\t\t\t\t\tlist='categoryList'\n\t\t\t\t\tplaceholder='Category'\n\t\t\t\t\tvalue={filter.category}\n\t\t\t\t\tautoComplete='off'\n\t\t\t\t/>\n\n\t\t\t\t<datalist id='categoryList'>\n\t\t\t\t\t{userData &&\n\t\t\t\t\t\tuserData.userCategories.map(category => {\n\t\t\t\t\t\t\treturn <option>{category}</option>;\n\t\t\t\t\t\t})}\n\t\t\t\t</datalist>\n\n\t\t\t\t<input\n\t\t\t\t\tonChange={handleFilter}\n\t\t\t\t\tname='client'\n\t\t\t\t\tlist='clientList'\n\t\t\t\t\tplaceholder='Client'\n\t\t\t\t\tvalue={filter.client}\n\t\t\t\t\tautoComplete='off'\n\t\t\t\t/>\n\n\t\t\t\t<datalist id='clientList'>\n\t\t\t\t\t{userData &&\n\t\t\t\t\t\tuserData.userClients.map(client => {\n\t\t\t\t\t\t\treturn <option>{client}</option>;\n\t\t\t\t\t\t})}\n\t\t\t\t</datalist>\n\t\t\t</div>\n\t\t\t<TaskTable tasks={tasksArray} />\n\t\t\t<h3>\n\t\t\t\tTotal task duration {('0' + totalDuration.hours.toString()).slice(-2)}:\n\t\t\t\t{('0' + totalDuration.minutes.toString()).slice(-2)}:{('0' + totalDuration.seconds.toString()).slice(-2)}\n\t\t\t</h3>\n\t\t</div>\n\t);\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}