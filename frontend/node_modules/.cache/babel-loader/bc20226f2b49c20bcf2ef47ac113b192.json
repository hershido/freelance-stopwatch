{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport TaskTable from \"./TaskTable\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const user = JSON.parse(localStorage.getItem(\"loggedinUser\"));\n  const [userData, setUserData] = useState(null); // console.log(\"user\", user);\n\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }); // set the intervalid to null\n\n  const [intervalId, setIntervalId] = useState(null);\n  const [startButton, setStartButton] = useState(\"Start\"); // set input fields to empty\n\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\"\n  });\n  const [filter, setFilter] = useState({\n    category: \"\",\n    client: \"\"\n  });\n  const [tasksArray, setTasksArray] = useState([]);\n  const [totalDuration, setTotalDuration] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  const [message, setMessage] = useState({\n    showMessage: false,\n    messageSuccess: false\n  }); // Sets the states based on user inputs\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function handleFilter(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setFilter(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function watchToggle() {\n    messageClear();\n\n    if (!intervalId) {\n      // start timer\n      setStartButton(\"Pause\");\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1000); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      setStartButton(\"Resume\"); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\"); // send request to server\n\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: user,\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        // duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n        duration: {\n          seconds: timer.seconds,\n          minutes: timer.minutes,\n          hours: timer.hours\n        }\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(body);\n      setMessage({\n        showMessage: true,\n        messageSuccess: body.success\n      });\n    }).then(setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    })).then(setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    })).then(getUserTasks).then(getUser);\n    fetch(\"http://localhost:5000/users/updateuser\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        category: taskInput.category,\n        client: taskInput.client,\n        userEmail: user\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(body);\n    });\n  }\n\n  function watchReset() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    });\n  }\n\n  function messageClear() {\n    setMessage({\n      showMessage: false,\n      messageSuccess: false\n    });\n  }\n\n  function getUserTasks() {\n    fetch(\"http://localhost:5000/tasks/\" + user, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        clientFilter: filter.client,\n        categoryFilter: filter.category\n      })\n    }).then(response => response.json()).then(data => {\n      let h = 0;\n      let m = 0;\n      let s = 0;\n      data.forEach(task => {\n        h = h + task.duration.hours;\n        m = m + task.duration.minutes;\n        s = s + task.duration.seconds;\n      });\n\n      function sumTotDur(hrs, mins, secs) {\n        m = Math.floor(m + s / 60);\n        s = s % 60;\n        h = Math.floor(h + m / 60);\n        m = m % 60;\n        return {\n          hours: h,\n          minutes: m,\n          seconds: s\n        };\n      }\n\n      const td = sumTotDur(h, m, s);\n      console.log(\"td\", td);\n      setTotalDuration(td);\n      console.log(totalDuration);\n      setTasksArray(data);\n    });\n  } // run code after every render\n\n\n  function getUser() {\n    fetch(\"http://localhost:5000/users/getfname/\" + user).then(response => response.json()).then(data => {\n      setUserData(data);\n    });\n  }\n\n  useEffect(() => {\n    getUserTasks();\n    getUser();\n  }, [filter]);\n\n  if (!user) {\n    // if no user in local storage redirect to login\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 14\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"watch-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"welcome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, \"Hi \", userData && userData.fname, \", get That work done!\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"Enter a new task and hit that \\\"Start\\\" button, you can always pause and resume, and when your finished with your task hit \\\"Done\\\".\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, (\"0\" + timer.hours.toString()).slice(-2), \":\", (\"0\" + timer.minutes.toString()).slice(-2), \":\", (\"0\" + timer.seconds.toString()).slice(-2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"control-btn start-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client,\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, startButton), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"control-btn done-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client || timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0,\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchReset,\n    className: \"control-btn reset-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, \"Discard\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    value: taskInput.task,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: taskInput.category,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }\n  }, userData && userData.userCategories.map(category => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 29\n      }\n    }, category);\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    list: \"clientList\",\n    placeholder: \"Enter Client\",\n    value: taskInput.client,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"clientList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }\n  }, userData && userData.userClients.map(client => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 29\n      }\n    }, client);\n  }))), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 10\n    }\n  }, \"Search By\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filterContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleFilter,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: filter.category,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 13\n    }\n  }, userData && userData.userCategories.map(category => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 29\n      }\n    }, category);\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleFilter,\n    name: \"client\",\n    list: \"clientList\",\n    placeholder: \"Client\",\n    value: filter.client,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"clientList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }\n  }, userData && userData.userClients.map(client => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 29\n      }\n    }, client);\n  }))), /*#__PURE__*/React.createElement(TaskTable, {\n    tasks: tasksArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 10\n    }\n  }, totalDuration.hours, \":\", totalDuration.minutes, \":\", totalDuration.seconds));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx"],"names":["React","useState","useEffect","Redirect","TaskTable","Stopwatch","user","JSON","parse","localStorage","getItem","userData","setUserData","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","startButton","setStartButton","taskInput","setTaskInput","task","category","client","filter","setFilter","tasksArray","setTasksArray","totalDuration","setTotalDuration","message","setMessage","showMessage","messageSuccess","handleInput","event","value","target","fieldName","name","prevState","handleFilter","watchToggle","messageClear","id","setInterval","clearInterval","watchDone","fetch","method","headers","body","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","console","log","json","success","getUserTasks","getUser","watchReset","clientFilter","categoryFilter","data","h","m","s","forEach","sumTotDur","hrs","mins","secs","Math","floor","td","fname","toString","slice","userCategories","map","userClients"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Redirect } from \"react-router-dom\";\nimport TaskTable from \"./TaskTable\";\n\nfunction Stopwatch() {\n   // set initial state for stopwatch\n   const user = JSON.parse(localStorage.getItem(\"loggedinUser\"));\n   const [userData, setUserData] = useState(null);\n   // console.log(\"user\", user);\n\n   const [timer, setTimer] = useState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n   });\n   // set the intervalid to null\n   const [intervalId, setIntervalId] = useState(null);\n\n   const [startButton, setStartButton] = useState(\"Start\");\n   // set input fields to empty\n   const [taskInput, setTaskInput] = useState({\n      task: \"\",\n      category: \"\",\n      client: \"\",\n   });\n\n   const [filter, setFilter] = useState({\n      category: \"\",\n      client: \"\",\n   });\n\n   const [tasksArray, setTasksArray] = useState([]);\n   const [totalDuration, setTotalDuration] = useState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n   });\n\n   const [message, setMessage] = useState({\n      showMessage: false,\n      messageSuccess: false,\n   });\n\n   // Sets the states based on user inputs\n   function handleInput(event) {\n      const value = event.target.value;\n      const fieldName = event.target.name;\n      setTaskInput((prevState) => {\n         return {\n            ...prevState,\n            [fieldName]: value,\n         };\n      });\n   }\n\n   function handleFilter(event) {\n      const value = event.target.value;\n      const fieldName = event.target.name;\n      setFilter((prevState) => {\n         return {\n            ...prevState,\n            [fieldName]: value,\n         };\n      });\n   }\n\n   function watchToggle() {\n      messageClear();\n      if (!intervalId) {\n         // start timer\n         setStartButton(\"Pause\");\n         const id = setInterval(() => {\n            setTimer((prevState) => {\n               let minutes = prevState.minutes;\n               let seconds = prevState.seconds;\n               let hours = prevState.hours;\n\n               if (seconds === 59) {\n                  seconds = 0;\n                  minutes++;\n               } else {\n                  seconds++;\n               }\n\n               if (minutes === 59) {\n                  minutes = 0;\n                  hours++;\n               }\n               return { seconds, minutes, hours };\n            });\n         }, 1000);\n\n         //  save interval id\n         setIntervalId(id);\n      } else {\n         // pause timer\n         clearInterval(intervalId);\n         setStartButton(\"Resume\");\n         //   remove internal id from stae\n         setIntervalId(null);\n      }\n   }\n\n   function watchDone() {\n      clearInterval(intervalId);\n      setIntervalId(null);\n      setStartButton(\"Start\");\n      // send request to server\n      fetch(\"http://localhost:5000/tasks/\", {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\", // body type\n         },\n         body: JSON.stringify({\n            userEmail: user,\n            taskTitle: taskInput.task,\n            taskCategory: taskInput.category,\n            clientName: taskInput.client,\n            // duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n            duration: {\n               seconds: timer.seconds,\n               minutes: timer.minutes,\n               hours: timer.hours,\n            },\n         }),\n      })\n         .then(function (response) {\n            // run after get response from server\n            console.log(\"res\", response);\n            return response.json(); // wait to body data from server (PROMISE)\n         })\n         .then(function (body) {\n            //   run after all body back from server\n            console.log(body);\n\n            setMessage({\n               showMessage: true,\n               messageSuccess: body.success,\n            });\n         })\n         .then(\n            setTaskInput({\n               task: \"\",\n               category: \"\",\n               client: \"\",\n            }),\n         )\n         .then(\n            setTimer({\n               hours: 0,\n               minutes: 0,\n               seconds: 0,\n            }),\n         )\n         .then(getUserTasks)\n         .then(getUser);\n\n      fetch(\"http://localhost:5000/users/updateuser\", {\n         method: \"PATCH\",\n         headers: {\n            \"Content-Type\": \"application/json\", // body type\n         },\n         body: JSON.stringify({\n            category: taskInput.category,\n            client: taskInput.client,\n            userEmail: user,\n         }),\n      })\n         .then(function (response) {\n            // run after get response from server\n            console.log(\"res\", response);\n            return response.json(); // wait to body data from server (PROMISE)\n         })\n         .then(function (body) {\n            //   run after all body back from server\n            console.log(body);\n         });\n   }\n\n   function watchReset() {\n      clearInterval(intervalId);\n      setIntervalId(null);\n      setStartButton(\"Start\");\n      setTimer({\n         hours: 0,\n         minutes: 0,\n         seconds: 0,\n      });\n      setTaskInput({\n         task: \"\",\n         category: \"\",\n         client: \"\",\n      });\n   }\n\n   function messageClear() {\n      setMessage({\n         showMessage: false,\n         messageSuccess: false,\n      });\n   }\n   function getUserTasks() {\n      fetch(\"http://localhost:5000/tasks/\" + user, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\", // body type\n         },\n         body: JSON.stringify({\n            clientFilter: filter.client,\n            categoryFilter: filter.category,\n         }),\n      })\n         .then((response) => response.json())\n         .then((data) => {\n            let h = 0;\n            let m = 0;\n            let s = 0;\n\n            data.forEach((task) => {\n               h = h + task.duration.hours;\n               m = m + task.duration.minutes;\n               s = s + task.duration.seconds;\n            });\n\n            function sumTotDur(hrs, mins, secs) {\n               m = Math.floor(m + s / 60);\n               s = s % 60;\n               h = Math.floor(h + m / 60);\n               m = m % 60;\n\n               return {\n                  hours: h,\n                  minutes: m,\n                  seconds: s,\n               };\n            }\n\n            const td = sumTotDur(h, m, s);\n\n            console.log(\"td\", td);\n\n            setTotalDuration(td);\n\n            console.log(totalDuration);\n\n            setTasksArray(data);\n         });\n   }\n\n   // run code after every render\n\n   function getUser() {\n      fetch(\"http://localhost:5000/users/getfname/\" + user)\n         .then((response) => response.json())\n         .then((data) => {\n            setUserData(data);\n         });\n   }\n\n   useEffect(() => {\n      getUserTasks();\n\n      getUser();\n   }, [filter]);\n\n   if (!user) {\n      // if no user in local storage redirect to login\n      return <Redirect to='/login' />;\n   }\n\n   return (\n      <div>\n         <header className='watch-header'>\n            <h1 className='welcome'>Hi {userData && userData.fname}, get That work done!</h1>\n            <p className='instructions'>\n               Enter a new task and hit that \"Start\" button, you can always pause and resume, and when your finished with your\n               task hit \"Done\".\n            </p>\n         </header>\n\n         <div className='digits-container'>\n            <div className='digits'>\n               {(\"0\" + timer.hours.toString()).slice(-2)}:{(\"0\" + timer.minutes.toString()).slice(-2)}:\n               {(\"0\" + timer.seconds.toString()).slice(-2)}\n            </div>\n         </div>\n         <div className='button-container'>\n            <button\n               className='control-btn start-button'\n               disabled={!taskInput.task || !taskInput.category || !taskInput.client}\n               onClick={watchToggle}>\n               {startButton}\n            </button>\n            <button\n               className='control-btn done-button'\n               disabled={\n                  !taskInput.task ||\n                  !taskInput.category ||\n                  !taskInput.client ||\n                  (timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0)\n               }\n               onClick={watchDone}>\n               Done\n            </button>\n            <button onClick={watchReset} className='control-btn reset-button'>\n               Discard\n            </button>\n         </div>\n         {/* {message.showMessage && (\n            <div className='alert-container'>\n               <div className={`alert-${message.messageSuccess ? \"success\" : \"failure\"}`}>\n                  <span className='closebtn' onClick={messageClear}>\n                     &times;\n                  </span>\n                  {message.messageSuccess ? \"Success!\" : \" Failure!\"}\n               </div>\n            </div>\n         )} */}\n         <div className='inputs-container'>\n            <input onChange={handleInput} name='task' placeholder='Enter task' value={taskInput.task} autoComplete='off'></input>\n            <input\n               onChange={handleInput}\n               type='text'\n               name='category'\n               list='categoryList'\n               placeholder='Category'\n               value={taskInput.category}\n               autoComplete='off'\n            />\n\n            <datalist id='categoryList'>\n               {userData &&\n                  userData.userCategories.map((category) => {\n                     return <option>{category}</option>;\n                  })}\n            </datalist>\n\n            <input\n               onChange={handleInput}\n               name='client'\n               list='clientList'\n               placeholder='Enter Client'\n               value={taskInput.client}\n               autoComplete='off'\n            />\n\n            <datalist id='clientList'>\n               {userData &&\n                  userData.userClients.map((client) => {\n                     return <option>{client}</option>;\n                  })}\n            </datalist>\n         </div>\n\n         <h2>Search By</h2>\n\n         <div className='filterContainer'>\n            {/* <input onChange={handleInput} name='task' placeholder='Enter task' value={taskInput.task} autoComplete='off'></input> */}\n            <input\n               onChange={handleFilter}\n               type='text'\n               name='category'\n               list='categoryList'\n               placeholder='Category'\n               value={filter.category}\n               autoComplete='off'\n            />\n\n            <datalist id='categoryList'>\n               {userData &&\n                  userData.userCategories.map((category) => {\n                     return <option>{category}</option>;\n                  })}\n            </datalist>\n\n            <input\n               onChange={handleFilter}\n               name='client'\n               list='clientList'\n               placeholder='Client'\n               value={filter.client}\n               autoComplete='off'\n            />\n\n            <datalist id='clientList'>\n               {userData &&\n                  userData.userClients.map((client) => {\n                     return <option>{client}</option>;\n                  })}\n            </datalist>\n         </div>\n         <TaskTable tasks={tasksArray} />\n         <h3>\n            {totalDuration.hours}:{totalDuration.minutes}:{totalDuration.seconds}\n         </h3>\n      </div>\n   );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}