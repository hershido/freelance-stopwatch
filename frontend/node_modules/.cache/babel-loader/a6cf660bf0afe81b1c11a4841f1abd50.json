{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx\";\nimport React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }); // set the intervalid to null\n\n  const [intervalId, setIntervalId] = useState(null);\n  const [startButton, setStartButton] = useState(\"Start\"); // set input fields to empty\n\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\"\n  });\n  const [message, setMessage] = useState({\n    showMessage: false,\n    messageSuccess: false\n  }); // Sets the states based on user inputs\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function watchToggle() {\n    messageClear();\n\n    if (!intervalId) {\n      // start timer\n      setStartButton(\"Pause\");\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1000); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      setStartButton(\"Resume\"); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\"); // send request to server\n\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      if (body.success) {\n        setMessage({\n          showMessage: true,\n          messageSuccess: true\n        });\n      } else {\n        setMessage({\n          showMessage: true,\n          messageSuccess: false\n        });\n      }\n    }).then(setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    })).then(setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    }));\n  }\n\n  function watchReset() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    });\n  }\n\n  function messageClear() {\n    setMessage({\n      showMessage: false,\n      messageSuccess: false\n    });\n  }\n\n  function tasksLoad() {\n    alert(\"OK OK\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, (\"0\" + timer.hours.toString()).slice(-2), \":\", (\"0\" + timer.minutes.toString()).slice(-2), \":\", (\"0\" + timer.seconds.toString()).slice(-2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client,\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, startButton), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"done-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client || timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0,\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchReset,\n    className: \"reset-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"Discard\")), message.showMessage && /*#__PURE__*/React.createElement(\"div\", {\n    class: \"alert-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, message.messageSuccess ? /*#__PURE__*/React.createElement(\"div\", {\n    class: \"alert-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    class: \"closebtn\",\n    onClick: messageClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, \"\\xD7\"), \"Success!\") : /*#__PURE__*/React.createElement(\"div\", {\n    class: \"alert-failure\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    class: \"closebtn\",\n    onClick: messageClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 15\n    }\n  }, \"\\xD7\"), \"Failure!\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    value: taskInput.task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: taskInput.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \" \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Recording\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Mixing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Video Editing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Programming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Whatever\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    placeholder: \"Enter Client\",\n    value: taskInput.client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"task-container\",\n    onClick: tasksLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, \"!!!!!\"));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx"],"names":["React","useState","Stopwatch","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","startButton","setStartButton","taskInput","setTaskInput","task","category","client","message","setMessage","showMessage","messageSuccess","handleInput","event","value","target","fieldName","name","prevState","watchToggle","messageClear","id","setInterval","clearInterval","watchDone","fetch","method","headers","body","JSON","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","console","log","json","success","watchReset","tasksLoad","alert","toString","slice"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  // set the intervalid to null\n  const [intervalId, setIntervalId] = useState(null);\n\n  const [startButton, setStartButton] = useState(\"Start\");\n  // set input fields to empty\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\",\n  });\n\n  const [message, setMessage] = useState({\n    showMessage: false,\n    messageSuccess: false,\n  });\n\n  // Sets the states based on user inputs\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput((prevState) => {\n      return {\n        ...prevState,\n        [fieldName]: value,\n      };\n    });\n  }\n\n  function watchToggle() {\n    messageClear();\n    if (!intervalId) {\n      // start timer\n      setStartButton(\"Pause\");\n      const id = setInterval(() => {\n        setTimer((prevState) => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n          return { seconds, minutes, hours };\n        });\n      }, 1000);\n\n      //  save interval id\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      setStartButton(\"Resume\");\n      //   remove internal id from stae\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    // send request to server\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\", // body type\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration:\n          timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n      }),\n    })\n      .then(function (response) {\n        // run after get response from server\n        console.log(\"res\", response);\n        return response.json(); // wait to body data from server (PROMISE)\n      })\n      .then(function (body) {\n        //   run after all body back from server\n        if (body.success) {\n          setMessage({\n            showMessage: true,\n            messageSuccess: true,\n          });\n        } else {\n          setMessage({\n            showMessage: true,\n            messageSuccess: false,\n          });\n        }\n      })\n      .then(\n        setTaskInput({\n          task: \"\",\n          category: \"\",\n          client: \"\",\n        })\n      )\n      .then(\n        setTimer({\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n        })\n      );\n  }\n\n  function watchReset() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    });\n    setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\",\n    });\n  }\n\n  function messageClear() {\n    setMessage({\n      showMessage: false,\n      messageSuccess: false,\n    });\n  }\n\n  function tasksLoad() {\n    alert(\"OK OK\");\n  }\n\n  return (\n    <div>\n      <div className='digits-container'>\n        <div className='digits'>\n          {(\"0\" + timer.hours.toString()).slice(-2)}:\n          {(\"0\" + timer.minutes.toString()).slice(-2)}:\n          {(\"0\" + timer.seconds.toString()).slice(-2)}\n        </div>\n      </div>\n      <div className='button-container'>\n        <button\n          className='start-button'\n          disabled={!taskInput.task || !taskInput.category || !taskInput.client}\n          onClick={watchToggle}\n        >\n          {startButton}\n        </button>\n        <button\n          className='done-button'\n          disabled={\n            !taskInput.task ||\n            !taskInput.category ||\n            !taskInput.client ||\n            (timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0)\n          }\n          onClick={watchDone}\n        >\n          Done\n        </button>\n        <button onClick={watchReset} className='reset-button'>\n          Discard\n        </button>\n      </div>\n\n      {message.showMessage && (\n        <div class='alert-container'>\n          {message.messageSuccess ? (\n            <div class='alert-success'>\n              <span class='closebtn' onClick={messageClear}>\n                &times;\n              </span>\n              Success!\n            </div>\n          ) : (\n            <div class='alert-failure'>\n              <span class='closebtn' onClick={messageClear}>\n                &times;\n              </span>\n              Failure!\n            </div>\n          )}\n        </div>\n      )}\n      <div className='inputs-container'>\n        <input\n          onChange={handleInput}\n          name='task'\n          placeholder='Enter task'\n          value={taskInput.task}\n        ></input>\n        <input\n          onChange={handleInput}\n          type='text'\n          name='category'\n          list='categoryList'\n          placeholder='Category'\n          value={taskInput.category}\n        />\n        <datalist id='categoryList'>\n          <option value=' ' />\n          <option value='Recording' />\n          <option value='Mixing' />\n          <option value='Video Editing' />\n          <option value='Programming' />\n          <option value='Whatever' />\n        </datalist>\n        <input\n          onChange={handleInput}\n          name='client'\n          placeholder='Enter Client'\n          value={taskInput.client}\n        ></input>\n      </div>\n\n      <div class='task-container' onClick={tasksLoad}>\n        !!!!!\n      </div>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}