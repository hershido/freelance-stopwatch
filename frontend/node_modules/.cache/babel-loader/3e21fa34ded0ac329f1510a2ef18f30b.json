{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.js\";\nimport React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  const [intervalId, setIntervalId] = useState(null);\n\n  function watchDone() {\n    clearInterval(intervalId); // send request to server\n\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: \"task title\",\n        taskCategory: \"category\",\n        clientName: \"client name\",\n        duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(\"body\", body);\n    });\n  }\n\n  function watchToggle() {\n    if (!intervalId) {\n      // start timer\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1000); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, timer.hours, \":\", timer.minutes, \":\", timer.seconds), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, intervalId ? \"pause\" : \"start\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"category\",\n    placeholder: \"Enter Category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    placeholder: \"Enter Client\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.js"],"names":["React","useState","Stopwatch","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","watchDone","clearInterval","fetch","method","headers","body","JSON","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","console","log","json","watchToggle","id","setInterval","prevState","handleInput"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  const [intervalId, setIntervalId] = useState(null);\n\n  function watchDone() {\n    clearInterval(intervalId);\n\n    // send request to server\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\", // body type\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: \"task title\",\n        taskCategory: \"category\",\n        clientName: \"client name\",\n        duration:\n          timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n      }),\n    })\n      .then(function (response) {\n        // run after get response from server\n        console.log(\"res\", response);\n        return response.json(); // wait to body data from server (PROMISE)\n      })\n      .then(function (body) {\n        //   run after all body back from server\n        console.log(\"body\", body);\n      });\n  }\n\n  function watchToggle() {\n    if (!intervalId) {\n      // start timer\n      const id = setInterval(() => {\n        setTimer((prevState) => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n          return { seconds, minutes, hours };\n        });\n      }, 1000);\n\n      //  save interval id\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      //   remove internal id from stae\n      setIntervalId(null);\n    }\n  }\n\n  return (\n    <div>\n      <h1>\n        {timer.hours}:{timer.minutes}:{timer.seconds}\n      </h1>\n      <button onClick={watchToggle}>{intervalId ? \"pause\" : \"start\"}</button>\n      <button onClick={watchDone}>Done</button>\n      <button>Reset</button>\n      <div>\n        <input\n          onChange={handleInput}\n          name='task'\n          placeholder='Enter task'\n        ></input>\n        <input\n          onChange={handleInput}\n          name='category'\n          placeholder='Enter Category'\n        ></input>\n        <input\n          onChange={handleInput}\n          name='client'\n          placeholder='Enter Client'\n        ></input>\n      </div>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}