{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }); // set the intervalid to null\n\n  const [intervalId, setIntervalId] = useState(null);\n  const [startButton, setStartButton] = useState(\"Start\"); // set input fields to empty\n\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\"\n  });\n  const [tasksArray, setTasksArray] = useState([]);\n  const [message, setMessage] = useState({\n    showMessage: false,\n    messageSuccess: false\n  }); // Sets the states based on user inputs\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n  }\n\n  function watchToggle() {\n    messageClear();\n\n    if (!intervalId) {\n      // start timer\n      setStartButton(\"Pause\");\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1000); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      setStartButton(\"Resume\"); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\"); // send request to server\n\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(body); // if (body.success) {\n      //   setMessage({\n      //     showMessage: true,\n      //     messageSuccess: true,\n      //   });\n      // } else {\n      //   setMessage({\n      //     showMessage: true,\n      //     messageSuccess: false,\n      //   });\n      // }\n\n      setMessage({\n        showMessage: true,\n        // messageSuccess: body.success,\n        messageSuccess: false\n      });\n    }).then(setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    })).then(setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    }));\n  }\n\n  function watchReset() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\"\n    });\n  }\n\n  function messageClear() {\n    setMessage({\n      showMessage: false,\n      messageSuccess: false\n    });\n  } // run code after every render\n\n\n  useEffect(() => {\n    function getUserTasks() {\n      fetch(\"http://localhost:5000/tasks\").then(response => response.json()).then(data => setTasksArray(data));\n    }\n\n    getUserTasks();\n  }, []);\n  console.log(\"tasksArray\", tasksArray);\n  const user = localStorage.getItem(\"user\");\n\n  if (!user) {\n    // if no user in local storage redirect to login\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"digits\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, (\"0\" + timer.hours.toString()).slice(-2), \":\", (\"0\" + timer.minutes.toString()).slice(-2), \":\", (\"0\" + timer.seconds.toString()).slice(-2))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client,\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, startButton), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"done-button\",\n    disabled: !taskInput.task || !taskInput.category || !taskInput.client || timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0,\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchReset,\n    className: \"reset-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, \"Discard\")), message.showMessage && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `alert-${message.messageSuccess ? \"success\" : \"failure\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"closebtn\",\n    onClick: messageClear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, \"\\xD7\"), message.messageSuccess ? \"Success!\" : \" Failure!\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"inputs-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    value: taskInput.task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    type: \"text\",\n    name: \"category\",\n    list: \"categoryList\",\n    placeholder: \"Category\",\n    value: taskInput.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"categoryList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \" \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Recording\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Mixing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Video Editing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Programming\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Whatever\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    placeholder: \"Enter Client\",\n    value: taskInput.client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, \"!!!!!\"));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.jsx"],"names":["React","useState","useEffect","Redirect","Stopwatch","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","startButton","setStartButton","taskInput","setTaskInput","task","category","client","tasksArray","setTasksArray","message","setMessage","showMessage","messageSuccess","handleInput","event","value","target","fieldName","name","prevState","watchToggle","messageClear","id","setInterval","clearInterval","watchDone","fetch","method","headers","body","JSON","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","console","log","json","watchReset","getUserTasks","data","user","localStorage","getItem","toString","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Redirect } from \"react-router-dom\";\n\nfunction Stopwatch() {\n  // set initial state for stopwatch\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  // set the intervalid to null\n  const [intervalId, setIntervalId] = useState(null);\n\n  const [startButton, setStartButton] = useState(\"Start\");\n  // set input fields to empty\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\",\n  });\n\n  const [tasksArray, setTasksArray] = useState([]);\n\n  const [message, setMessage] = useState({\n    showMessage: false,\n    messageSuccess: false,\n  });\n\n  // Sets the states based on user inputs\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput((prevState) => {\n      return {\n        ...prevState,\n        [fieldName]: value,\n      };\n    });\n  }\n\n  function watchToggle() {\n    messageClear();\n    if (!intervalId) {\n      // start timer\n      setStartButton(\"Pause\");\n      const id = setInterval(() => {\n        setTimer((prevState) => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n          return { seconds, minutes, hours };\n        });\n      }, 1000);\n\n      //  save interval id\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      setStartButton(\"Resume\");\n      //   remove internal id from stae\n      setIntervalId(null);\n    }\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    // send request to server\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\", // body type\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n      }),\n    })\n      .then(function (response) {\n        // run after get response from server\n        console.log(\"res\", response);\n        return response.json(); // wait to body data from server (PROMISE)\n      })\n      .then(function (body) {\n        //   run after all body back from server\n        console.log(body);\n\n        // if (body.success) {\n        //   setMessage({\n        //     showMessage: true,\n        //     messageSuccess: true,\n        //   });\n        // } else {\n        //   setMessage({\n        //     showMessage: true,\n        //     messageSuccess: false,\n        //   });\n        // }\n        setMessage({\n          showMessage: true,\n          // messageSuccess: body.success,\n          messageSuccess: false,\n        });\n      })\n      .then(\n        setTaskInput({\n          task: \"\",\n          category: \"\",\n          client: \"\",\n        })\n      )\n      .then(\n        setTimer({\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n        })\n      );\n  }\n\n  function watchReset() {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setStartButton(\"Start\");\n    setTimer({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    });\n    setTaskInput({\n      task: \"\",\n      category: \"\",\n      client: \"\",\n    });\n  }\n\n  function messageClear() {\n    setMessage({\n      showMessage: false,\n      messageSuccess: false,\n    });\n  }\n\n  // run code after every render\n  useEffect(() => {\n    function getUserTasks() {\n      fetch(\"http://localhost:5000/tasks\")\n        .then((response) => response.json())\n        .then((data) => setTasksArray(data));\n    }\n\n    getUserTasks();\n  }, []);\n\n  console.log(\"tasksArray\", tasksArray);\n\n  const user = localStorage.getItem(\"user\");\n\n  if (!user) {\n    // if no user in local storage redirect to login\n    return <Redirect to='/login' />;\n  }\n\n  return (\n    <div>\n      <div className='digits-container'>\n        <div className='digits'>\n          {(\"0\" + timer.hours.toString()).slice(-2)}:{(\"0\" + timer.minutes.toString()).slice(-2)}:\n          {(\"0\" + timer.seconds.toString()).slice(-2)}\n        </div>\n      </div>\n      <div className='button-container'>\n        <button\n          className='start-button'\n          disabled={!taskInput.task || !taskInput.category || !taskInput.client}\n          onClick={watchToggle}\n        >\n          {startButton}\n        </button>\n        <button\n          className='done-button'\n          disabled={\n            !taskInput.task ||\n            !taskInput.category ||\n            !taskInput.client ||\n            (timer.seconds === 0 && timer.minutes === 0 && timer.hours === 0)\n          }\n          onClick={watchDone}\n        >\n          Done\n        </button>\n        <button onClick={watchReset} className='reset-button'>\n          Discard\n        </button>\n      </div>\n\n      {message.showMessage && (\n        <div className='alert-container'>\n          <div className={`alert-${message.messageSuccess ? \"success\" : \"failure\"}`}>\n            <span className='closebtn' onClick={messageClear}>\n              &times;\n            </span>\n            {message.messageSuccess ? \"Success!\" : \" Failure!\"}\n          </div>\n        </div>\n      )}\n      <div className='inputs-container'>\n        <input onChange={handleInput} name='task' placeholder='Enter task' value={taskInput.task}></input>\n        <input\n          onChange={handleInput}\n          type='text'\n          name='category'\n          list='categoryList'\n          placeholder='Category'\n          value={taskInput.category}\n        />\n        <datalist id='categoryList'>\n          <option value=' ' />\n          <option value='Recording' />\n          <option value='Mixing' />\n          <option value='Video Editing' />\n          <option value='Programming' />\n          <option value='Whatever' />\n        </datalist>\n        <input onChange={handleInput} name='client' placeholder='Enter Client' value={taskInput.client}></input>\n      </div>\n\n      <div className='task-container'>!!!!!</div>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}