{"ast":null,"code":"var _jsxFileName = \"/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.js\";\nimport React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  const [intervalId, setIntervalId] = useState(null);\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\"\n  });\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput(prevState => {\n      return { ...prevState,\n        [fieldName]: value\n      };\n    });\n    console.log(taskInput);\n  }\n\n  function watchDone() {\n    clearInterval(intervalId); // send request to server\n\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // body type\n\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration: timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000\n      })\n    }).then(function (response) {\n      // run after get response from server\n      console.log(\"res\", response);\n      return response.json(); // wait to body data from server (PROMISE)\n    }).then(function (body) {\n      //   run after all body back from server\n      console.log(\"body\", body);\n    });\n  }\n\n  function watchToggle() {\n    if (!intervalId) {\n      // start timer\n      const id = setInterval(() => {\n        setTimer(prevState => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n\n          return {\n            seconds,\n            minutes,\n            hours\n          };\n        });\n      }, 1000); //  save interval id\n\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId); //   remove internal id from stae\n\n      setIntervalId(null);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, timer.hours, \":\", timer.minutes, \":\", timer.seconds), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: true,\n    onClick: watchToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, intervalId ? \"pause\" : \"start\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: watchDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"Done\"), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"task\",\n    placeholder: \"Enter task\",\n    value: taskInput.task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"category\",\n    placeholder: \"Enter Category\",\n    value: taskInput.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleInput,\n    name: \"client\",\n    placeholder: \"Enter Client\",\n    value: taskInput.client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/Dodo/Desktop/StopWatch/frontend/src/componets/Stopwatch.js"],"names":["React","useState","Stopwatch","timer","setTimer","hours","minutes","seconds","intervalId","setIntervalId","taskInput","setTaskInput","task","category","client","handleInput","event","value","target","fieldName","name","prevState","console","log","watchDone","clearInterval","fetch","method","headers","body","JSON","stringify","userEmail","taskTitle","taskCategory","clientName","duration","then","response","json","watchToggle","id","setInterval"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Stopwatch() {\n  const [timer, setTimer] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  const [intervalId, setIntervalId] = useState(null);\n\n  const [taskInput, setTaskInput] = useState({\n    task: \"\",\n    category: \"\",\n    client: \"\",\n  });\n\n  function handleInput(event) {\n    const value = event.target.value;\n    const fieldName = event.target.name;\n    setTaskInput((prevState) => {\n      return {\n        ...prevState,\n        [fieldName]: value,\n      };\n    });\n    console.log(taskInput);\n  }\n\n  function watchDone() {\n    clearInterval(intervalId);\n\n    // send request to server\n    fetch(\"http://localhost:5000/tasks/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\", // body type\n      },\n      body: JSON.stringify({\n        userEmail: \"my@mail.com\",\n        taskTitle: taskInput.task,\n        taskCategory: taskInput.category,\n        clientName: taskInput.client,\n        duration:\n          timer.seconds * 1000 + timer.minutes * 60000 + timer.hours * 3600000,\n      }),\n    })\n      .then(function (response) {\n        // run after get response from server\n        console.log(\"res\", response);\n        return response.json(); // wait to body data from server (PROMISE)\n      })\n      .then(function (body) {\n        //   run after all body back from server\n        console.log(\"body\", body);\n      });\n  }\n\n  function watchToggle() {\n    if (!intervalId) {\n      // start timer\n      const id = setInterval(() => {\n        setTimer((prevState) => {\n          let minutes = prevState.minutes;\n          let seconds = prevState.seconds;\n          let hours = prevState.hours;\n\n          if (seconds === 59) {\n            seconds = 0;\n            minutes++;\n          } else {\n            seconds++;\n          }\n\n          if (minutes === 59) {\n            minutes = 0;\n            hours++;\n          }\n          return { seconds, minutes, hours };\n        });\n      }, 1000);\n\n      //  save interval id\n      setIntervalId(id);\n    } else {\n      // pause timer\n      clearInterval(intervalId);\n      //   remove internal id from stae\n      setIntervalId(null);\n    }\n  }\n\n  return (\n    <div>\n      <h1>\n        {timer.hours}:{timer.minutes}:{timer.seconds}\n      </h1>\n      <button disabled onClick={watchToggle}>\n        {intervalId ? \"pause\" : \"start\"}\n      </button>\n      <button onClick={watchDone}>Done</button>\n      <button>Reset</button>\n      <div>\n        <input\n          onChange={handleInput}\n          name='task'\n          placeholder='Enter task'\n          value={taskInput.task}\n        ></input>\n        <input\n          onChange={handleInput}\n          name='category'\n          placeholder='Enter Category'\n          value={taskInput.category}\n        ></input>\n        <input\n          onChange={handleInput}\n          name='client'\n          placeholder='Enter Client'\n          value={taskInput.client}\n        ></input>\n      </div>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}